generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  email                String              @unique
  phoneNumber          String?             @unique
  password             String
  isVerified           Boolean             @default(false)
  isEmailVerified      Boolean?            @default(false)
  isNumberVerified     Boolean?            @default(false)
  country              String?             @default("Nigeria") // Optional, based on your error logs
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  tempToken            String?
  chatMessagesSent     ChatMessage[]       @relation("Sender")
  chatMessagesReceived ChatMessage[]       @relation("Receiver")
  jobsApplied          JobMarket[]
  notifications        Notification[]
  propertiesUploaded   PropertyMarket[]
  apartmentsUploaded   RealEstate[]
  reminders            Reminder[]
  reports              Report[]
  reviews              Review[]
  searches             Search[]
  realEstateInterest   RealEstateInterest?

  userKyc  UserKyc?
  userInfo UserInfo? // Ensure this is correctly defined

  @@map("users")
}

model UserInfo {
  id             String   @id @default(uuid())
  fullName       String
  profilePicture String
  address        String
  userType       String
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("usersinfo")
}

model UserKyc {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  passportPhoto String[]
  idType        String
  idFrontImage  String
  idBackImage   String
  nyscNumber    String?
  nin           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RealEstate {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  houseName String?

  category         String
  numberOfRooms    Int
  pictures         String[]
  mainPictureIndex Int
  description      String
  state            String
  lga              String
  country          String   @default("Nigeria")
  nearby           String[]
  amenities        String[]
  address          String
  createdAt        DateTime @default(now())

  reviews Review[]

  // Indexes
  @@index([category])
  @@index([numberOfRooms])
  @@index([state])
  @@index([lga])
  @@map("properties")
}

model Review {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  realEstateId Int
  realEstate   RealEstate @relation(fields: [realEstateId], references: [id])

  rating           Int
  comment          String?
  propertyPictures String[]
  createdAt        DateTime @default(now())

  @@unique([userId, realEstateId])
  @@map("reviews")
}

model Report {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  reportCategory String
  comment        String?
  reportPriority String
  reportableType String
  createdAt      DateTime @default(now())

  @@map("reports")
}

model ChatMessage {
  id Int @id @default(autoincrement())

  sender   User   @relation("Sender", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String

  message     String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  isDelivered Boolean  @default(false)

  @@map("chatMessages")
}

model Contact {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("contacts")
}

model JobMarket {
  id Int @id @default(autoincrement())

  user   User?  @relation(fields: [userId], references: [id])
  userId String

  companyName         String
  jobTitle            String
  jobDescription      String
  keyResponsibilities String[]
  qualifications      String[]
  workArrangement     String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  applicationUrl      String
}

model Notification {
  id                  Int      @id @default(autoincrement())
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  message             String
  createdAt           DateTime @default(now())
  status              String
  type                String
  priority            String
  actionButtonLabel   String?
  actionButtonLink    String?
  relatedResourceLink String?

  @@map("notifications")
}

model PropertyMarket {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  title       String
  description String
  price       Float
  images      String[]
  location    String
  createdAt   DateTime @default(now())

  @@map("propertyMarkets")
}

model Reminder {
  id                       Int      @id @default(autoincrement())
  userId                   String
  title                    String
  location                 String
  time                     DateTime
  dueDate                  DateTime
  note                     String
  appointmentContactNumber String
  status                   Boolean
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Search {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  query     String
  timestamp DateTime @default(now())

  @@map("searches")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  roles     Role[]   @relation("AdminRoles")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id     String  @id @default(uuid())
  name   String  @unique
  admins Admin[] @relation("AdminRoles")
}

model RealEstateInterest {
  id      Int      @id @default(autoincrement())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id])
  state   String[]
  lga     String[]
  country String[]

  @@map("real_estate_interests")
}
